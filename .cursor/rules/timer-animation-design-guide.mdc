---
description: 
globs: **/*
---
# SwiftUI Pomodoro Timer Animation Implementation Guide

## 1. Core Data Structures

```swift
struct Tim  lmeIIntrtPt ePoi CGrAneObject {
    @Published var progress: Double = 0
    @Published var currentPosition: CGPoint
    @Published var isAnimating: Bool = false
    @Published var rotationAngle: Angle = .degrees(0)
}
```

## 2. Custom Shapes Implementation

```swift
struct CircularMarkerPath: Shape {
    let markerCount: Int
    let radius: CGFloat
    
    func path(in rect: CGRect) -> Path {
        var path = Path()
        let center = CGPoint(x: rect.midX, y: rect.midY)
        
        for i in 0..<markerCount {
            let angle = (2 * .pi * Double(i)) / Double(markerCount)
            let markerPoint = CGPoint(
                x: center.x + radius * cos(angle),
                y: center.y + radius * sin(angle)
            )
            // gic
        }
        return path
    }
}
```

## 3. View Components

### Main Container
```swift
struct PomodoroTimerView: View {
    @StateObject private var animationState = TimerAnimationState()
    @State private var configuration: TimerConfiguration
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                MarkerRing()
                TimerCircle()
                TimeLabels()
            }
            .position(animationState.currentPosition)
        }
    }
}
```

### Timer Circle Component
```swift
struct TimerCircle: View {
    @EnvironmentObject var animationState: TimerAnimationState
    
    var body: some View {
        Circle()
            .stroke(lineWidth: 3)
            .fill(progressGradient)
            .rotationEffect(animationState.rotationAngle)
    }
    
    private var progressGradient: LinearGradient {
        // Color transition logic based on progress
    }
}
```

## 4. Animation System

### Entry Animation
```swift
func startEntryAnimation() {
    withAnimation(.spring(
        response: 0.8,
        dampingFraction: 0.7,
        blendDuration: 0.3
    )) {
        animationState.currentPosition = configuration.endPosition
    }
}
```

### Rotation Animation
```swift
func updateRotation() {
    withAnimation(.linear(duration: configuration.duration)) {
        animationState.rotationAngle = .degrees(360)
    }
}
```

### Color Transition
```swift
func interpolateColors(progress: Double) -> Color {
    // Calculate color based on progress
    let startColor = Color(hex: "FF6B6B")
    let endColor = Color(hex: "F03E3E")
    return startColor.interpolated(to: endColor, progress: progress)
}
```

## 5. Marker Generation System

```swift
struct MarkerSystem {
    let totalDuration: TimeInterval
    let markerCount: Int
    
    func generateMarkers() -> [Marker] {
        var markers: [Marker] = []
        
        // Start marker
        markers.append(Marker(position: 0, label: "START"))
        
        // Intermediate markers
        for i in 1..<markerCount {
            let minutes = Int((Double(i) / Double(markerCount)) * totalDuration / 60)
            markers.append(Marker(position: i, label: "\(minutes)"))
        }
        
        // End marker
        markers.append(Marker(position: markerCount, label: "END"))
        
        return markers
    }
}
```

## 6. View Modifiers

```swift
struct TimerStyleModifier: ViewModifier {
    func body(content: Content) -> some View {
        content
            .aspectRatio(1, contentMode: .fit)
            .gesture(timerGestures)
    }
    
    private var timerGestures: some Gesture {
        // Gesture implementation
    }
}
```

## 7. State Management

```swift
enum TimerViewState {
    case initial
    case animating
    case paused
    case completed
    
    var allowsInteraction: Bool {
        switch self {
        case .initial, .paused: return true
        default: return false
        }
    }
}
```

## 8. Combine Integration

```swift
extension PomodoroTimerView {
    private func setupTimerPublisher() {
        Timer.publish(every: 1/60, on: .main, in: .common)
            .autoconnect()
            .sink { [weak self] _ in
                self?.updateTimer()
            }
            .store(in: &cancellables)
    }
}
```

## 9. Performance Optimizations

```swift
// View drawing optimization
private func optimizedMarkerView(_ marker: Marker) -> some View {
    marker.label
        .fixedSize()
        .drawingGroup()
        .id(marker.position)
}

// Cache management
private var cachedGradients: [Double: LinearGradient] = [:]
```

## 10. Memory Management

```swift
// Proper cleanup
private func cleanupResources() {
    cancellables.forEach { $0.cancel() }
    cancellables.removeAll()
    // Additional cleanup as needed
}
```

## 11. Extension Utilities

```swift
extension Color {
    func interpolated(to endColor: Color, progress: Double) -> Color {
        // Color interpolation implementation
    }
}

extension View {
    func timerStyle() -> some View {
        modifier(TimerStyleModifier())
    }
}
```

## 12. Accessibility Support

```swift
extension PomodoroTimerView {
    private func setupAccessibility() {
        // Accessibility configuration
    }
}
```

## Implementation Order

1. Set up basic view structure with GeometryReader
2. Implement custom shapes for timer circle
3. Create marker generation system
4. Add entry animation
5. Implement rotation animation
6. Add color transition system
7. Integrate timer logic
8. Add gesture handling
9. Implement state management
10. Add performance optimizations
11. Implement accessibility
12. Final polish and refinements